import { CronJob } from "cron";
import { getAllSubscriptions, updateSubscriptionDetails, updateSubscriptionPrice } from "./modules/subscription";
import { checkFlightPrice } from "./modules/price-checker";
import { sendPriceAlert } from "./modules/bot";
import TelegramBot from "node-telegram-bot-api";

export const priceCheckJob =  (bot: TelegramBot) => new CronJob(
    process.env.CHECK_INTERVAL || '0 */1 * * *', // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    async function() {
      try {
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∫–∞–º–∏...');
        const subscriptions = await getAllSubscriptions();
        
        for (const subscription of subscriptions) {
          try {
            console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}: ${subscription.origin} -> ${subscription.destination}`);
            let currentPrice: number | null = null;
            let bestDate: string | undefined = undefined;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            if (subscription.dateType === 'single' && subscription.date) {
              // –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
              currentPrice = await checkFlightPrice(
                subscription.origin,
                subscription.destination,
                subscription.date
              );
            } else if (subscription.dateType === 'range' && subscription.startDate && subscription.endDate) {
              // –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ª—É—á—à—É—é –¥–∞—Ç—É –∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞
              const dateToCheck = subscription.bestDate || subscription.startDate;
              currentPrice = await checkFlightPrice(
                subscription.origin,
                subscription.destination,
                dateToCheck
              );
              bestDate = subscription.bestDate || subscription.startDate;
            }
            
            if (currentPrice) {
              console.log(`–ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ ${currentPrice} –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}`);
              
              // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
              if (!subscription.lastPrice) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                if (bestDate && subscription.dateType === 'range') {
                  await updateSubscriptionDetails(subscription.id, {
                    lastPrice: currentPrice,
                    bestDate: bestDate
                  });
                } else {
                  await updateSubscriptionPrice(subscription.id, currentPrice);
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                let message = `üîç –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n`;
                message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
                
                if (subscription.dateType === 'single') {
                  message += `üìÖ –î–∞—Ç–∞: ${subscription.date}\n`;
                } else {
                  message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n`;
                  if (bestDate) {
                    message += `üìÖ –õ—É—á—à–∞—è –¥–∞—Ç–∞: ${bestDate}\n`;
                  }
                }
                
                message += `\nüí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice} —Ä—É–±.\n`;
                message += `\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã.`;
                
                bot.sendMessage(subscription.chatId, message);
              } 
              // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
              else if (currentPrice !== subscription.lastPrice) {
                console.log(`–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å ${subscription.lastPrice} –Ω–∞ ${currentPrice}`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
                sendPriceAlert(bot, subscription, currentPrice, subscription.lastPrice);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ü–µ–Ω—É
                if (bestDate && subscription.dateType === 'range') {
                  await updateSubscriptionDetails(subscription.id, {
                    lastPrice: currentPrice,
                    bestDate: bestDate
                  });
                } else {
                  await updateSubscriptionPrice(subscription.id, currentPrice);
                }
              } 
              // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª—É—á—à–∞—è –¥–∞—Ç–∞ (–¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
              else if (bestDate && subscription.dateType === 'range' && bestDate !== subscription.bestDate) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –ª—É—á—à–µ–π –¥–∞—Ç–µ
                let message = `üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—É—á—à–µ–π –¥–∞—Ç—ã –¥–ª—è –ø–æ–µ–∑–¥–∫–∏!\n\n`;
                message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
                message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n`;
                message += `üìÖ –ù–æ–≤–∞—è –ª—É—á—à–∞—è –¥–∞—Ç–∞: ${bestDate}\n`;
                message += `\nüí∞ –¶–µ–Ω–∞: ${currentPrice} —Ä—É–±.\n`;
                
                bot.sendMessage(subscription.chatId, message);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é –¥–∞—Ç—É
                await updateSubscriptionDetails(subscription.id, {
                  lastPrice: currentPrice,
                  bestDate: bestDate
                });
              } else {
                console.log(`–¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}: ${currentPrice} —Ä—É–±.`);
              }
            } else {
              console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}`);
            }
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, error);
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω:', error);
      }
    },
    null,
    true
  );