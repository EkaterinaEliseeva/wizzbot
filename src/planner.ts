import { CronJob } from "cron";
import { 
  getAllSubscriptions, 
  updateSubscriptionPrice, 
  updateBestDates,
  areBestDatesChanged
} from "./modules/subscription";
import { checkFlightPrice, checkFlightPriceRange } from "./modules/price-checker";
import { sendPriceAlert, sendBestDatesAlert, sendMessage } from "./modules/bot";
import TelegramBot from "node-telegram-bot-api";

export const priceCheckJob = (bot: TelegramBot) => new CronJob(
  process.env.CHECK_INTERVAL || '0 */1 * * *',
  async function() {
    try {
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∫–∞–º–∏...');
      const subscriptions = await getAllSubscriptions();
      
      for (const subscription of subscriptions) {
        try {
          console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}: ${subscription.origin} -> ${subscription.destination}`);
          
          if (subscription.dateType === 'single' && subscription.date) {
            await checkSingleDateSubscription(bot, subscription);
          } else if (subscription.dateType === 'range' && subscription.startDate && subscription.endDate) {
            await checkDateRangeSubscription(bot, subscription);
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, error);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω:', error);
    }
  },
  null,
  true
);

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–æ–π
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param subscription –ü–æ–¥–ø–∏—Å–∫–∞
 */
async function checkSingleDateSubscription(
  bot: TelegramBot,
  subscription: any
) {
  const currentPrice = await checkFlightPrice(
    subscription.origin,
    subscription.destination,
    subscription.date
  );
  
  if (currentPrice) {
    console.log(`–ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ ${currentPrice} –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}`);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if (!subscription.lastPrice) {
      await updateSubscriptionPrice(subscription.id, currentPrice);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
      let message = `üîç –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n`;
      message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
      message += `üìÖ –î–∞—Ç–∞: ${subscription.date}\n`;
      message += `\nüí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice} —Ä—É–±.\n`;
      message += `\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã.`;
      
      bot.sendMessage(subscription.chatId, message);
    } 
    // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    else if (currentPrice !== subscription.lastPrice) {
      console.log(`–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å ${subscription.lastPrice} –Ω–∞ ${currentPrice}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
      sendPriceAlert(bot, subscription, currentPrice, subscription.lastPrice);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ü–µ–Ω—É
      await updateSubscriptionPrice(subscription.id, currentPrice);
    } else {
      console.log(`–¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}: ${currentPrice} —Ä—É–±.`);
    }
  } else {
    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param subscription –ü–æ–¥–ø–∏—Å–∫–∞
 */
async function checkDateRangeSubscription(
  bot: TelegramBot,
  subscription: any
) {
  // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç
  const priceRangeInfo = await checkFlightPriceRange(
    subscription.origin,
    subscription.destination,
    subscription.startDate,
    subscription.endDate
  );
  
  if (priceRangeInfo && priceRangeInfo.bestDates.length > 0) {
    const { bestDates, minPrice } = priceRangeInfo;
    console.log(`–ü–æ–ª—É—á–µ–Ω—ã –ª—É—á—à–∏–µ –¥–∞—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${minPrice}`);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if (!subscription.lastPrice) {
      await updateBestDates(subscription.id, bestDates, minPrice);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
      let message = `üîç –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n`;
      message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
      message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n\n`;
      message += `üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${minPrice} —Ä—É–±.\n\n`;
      
      if (bestDates.length === 1) {
        message += `üìÖ –õ—É—á—à–∞—è –¥–∞—Ç–∞: ${bestDates[0].date}\n`;
      } else {
        message += `üìÖ –õ—É—á—à–∏–µ –¥–∞—Ç—ã (${bestDates.length}):\n`;
        bestDates.forEach((item, index) => {
          message += `   ${index + 1}. ${item.date}\n`;
        });
      }
      
      message += `\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω.`;
      
      bot.sendMessage(subscription.chatId, message);
    } 
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ –Ω–∞–±–æ—Ä –ª—É—á—à–∏—Ö –¥–∞—Ç
    else if (minPrice !== subscription.lastPrice || areBestDatesChanged(subscription.bestDates, bestDates)) {
      console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –¥–∞—Ç –∏–ª–∏ —Ü–µ–Ω—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      sendBestDatesAlert(bot, subscription, bestDates, subscription.lastPrice);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É—á—à–∏—Ö –¥–∞—Ç–∞—Ö
      await updateBestDates(subscription.id, bestDates, minPrice);
    } else {
      console.log(`–õ—É—á—à–∏–µ –¥–∞—Ç—ã –∏ —Ü–µ–Ω—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}`);
    }
  } else {
    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}`);
  }
}