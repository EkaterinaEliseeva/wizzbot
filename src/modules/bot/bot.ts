import TelegramBot from 'node-telegram-bot-api';
import { getSubscriptionStatuses } from '../price-checker';
import { addSubscription, getSubscriptions, removeSubscription } from '../subscription';
import { IUserState } from './types';
import { ISubscription } from '../subscription/types';


// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates: Map<number, IUserState> = new Map();

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –±–æ—Ç–∞
 * @param token –¢–æ–∫–µ–Ω –±–æ—Ç–∞
 * @returns –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
export function initBot(token: string): TelegramBot {
  if (!token) {
    throw new Error('–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
  }

  const bot = new TelegramBot(token, { polling: true });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –∏ —Å–æ–æ–±—â–∞—Ç—å, –∫–æ–≥–¥–∞ –æ–Ω–∏ —Å–Ω–∏–∑—è—Ç—Å—è.
      
–í–∞—à ID —á–∞—Ç–∞: ${chatId}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/subscribe - –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–∏–ª–µ—Ç—ã
/subscriptions - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É`
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
  bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      `üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/subscribe - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–∏–ª–µ—Ç—ã
/subscriptions - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.`
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe
  bot.onText(/\/subscribe/, (msg) => {
    const chatId = msg.chat.id;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.set(chatId, {
      chatId,
      stage: 'waiting_origin',
      subscription: {
        chatId: chatId,
        id: Date.now().toString()
      }
    });
    
    bot.sendMessage(
      chatId,
      '‚úàÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã!\n\n–£–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≥–æ—Ä–æ–¥):',
      {
        reply_markup: {
          force_reply: true
        }
      }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscriptions
  bot.onText(/\/subscriptions/, async (msg) => {
    const chatId = msg.chat.id;
    const subscriptions = await getSubscriptions(chatId);
    const message = await getSubscriptionStatuses(subscriptions)
    
    bot.sendMessage(chatId, message);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  bot.onText(/\/remove_(.+)/, async (msg, match) => {
    if (!match || !match[1]) return;
    
    const chatId = msg.chat.id;
    const subscriptionId = match[1];
    
    await removeSubscription(chatId, subscriptionId);
    bot.sendMessage(chatId, '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!');
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  bot.on('message', (msg) => {
    if (!msg.text || msg.text.startsWith('/')) return;
    
    const chatId = msg.chat.id;
    const userState = userStates.get(chatId);
    
    if (!userState) return;
    
    processUserDialog(bot, userState, msg.text);
  });

  return bot;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param state –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function processUserDialog(bot: TelegramBot, state: IUserState, text: string): void {
  const { chatId, stage, subscription } = state;
  
  switch (stage) {
    case 'waiting_origin':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      subscription.origin = text.trim();
      state.stage = 'waiting_destination';
      
      bot.sendMessage(
        chatId,
        `üèô –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${subscription.origin}\n\n–£–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–≥–æ—Ä–æ–¥):`,
        {
          reply_markup: {
            force_reply: true
          }
        }
      );
      break;
      
    case 'waiting_destination':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      subscription.destination = text.trim();
      state.stage = 'waiting_date';
      
      bot.sendMessage(
        chatId,
        `üèô –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${subscription.origin}\nüèù –ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è: ${subscription.destination}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞—Ç—ã:`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞', callback_data: 'date_single' },
                { text: '–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç', callback_data: 'date_range' }
              ]
            ]
          }
        }
      );
      break;
      
    case 'waiting_date':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
      subscription.dateType = 'single';
      subscription.date = text.trim();
      subscription.maxPrice = 1000000; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      createSubscription(bot, state);
      break;
      
    case 'waiting_date_range':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
      try {
        const [startDate, endDate] = text.split('-').map(d => d.trim());
        if (!startDate || !endDate) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
        
        subscription.dateType = 'range';
        subscription.startDate = startDate;
        subscription.endDate = endDate;
        subscription.maxPrice = 1000000; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        createSubscription(bot, state);
      } catch (e) {
        bot.sendMessage(
          chatId,
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY - DD.MM.YYYY'
        );
      }
      break;
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param state –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function createSubscription(bot: TelegramBot, state: IUserState): void {
  const { chatId, subscription } = state;
  
  // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  addSubscription(subscription as ISubscription)
    .then(() => {
      let message = '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n';
      message += `üèô –û—Ç–∫—É–¥–∞: ${subscription.origin}\n`;
      message += `üèù –ö—É–¥–∞: ${subscription.destination}\n`;
      
      if (subscription.dateType === 'single') {
        message += `üìÖ –î–∞—Ç–∞: ${subscription.date}\n`;
      } else {
        message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n`;
      }
      
      message += '\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞–π–¥—É—Ç—Å—è –±–∏–ª–µ—Ç—ã –ø–æ –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ.';
      
      bot.sendMessage(chatId, message);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userStates.delete(chatId);
    })
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      userStates.delete(chatId);
    });
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
export function setupCallbackQueryHandlers(bot: TelegramBot): void {
  bot.on('callback_query', (query) => {
    if (!query.message || !query.data) return;
    
    const chatId = query.message.chat.id;
    const userState = userStates.get(chatId);
    
    if (!userState) return;
    
    const messageId = query.message.message_id;
    
    if (query.data === 'date_single') {
      userState.stage = 'waiting_date';
      bot.editMessageText('–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:', {
        chat_id: chatId,
        message_id: messageId
      });
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:', {
        reply_markup: { force_reply: true }
      });
    } else if (query.data === 'date_range') {
      userState.stage = 'waiting_date_range';
      bot.editMessageText('–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:', {
        chat_id: chatId,
        message_id: messageId
      });
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì:', {
        reply_markup: { force_reply: true }
      });
    }
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param chatId ID —á–∞—Ç–∞
 * @param message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export function sendMessage(bot: TelegramBot, chatId: string | number, message: string): void {
  bot.sendMessage(chatId, message);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ü–µ–Ω—ã
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param subscription –ü–æ–¥–ø–∏—Å–∫–∞
 * @param newPrice –ù–æ–≤–∞—è —Ü–µ–Ω–∞
 * @param oldPrice –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞
 */
export function sendPriceAlert(
  bot: TelegramBot, 
  subscription: ISubscription, 
  newPrice: number, 
  oldPrice: number
): void {
  const priceDiff = Math.abs(oldPrice - newPrice);
  const percentDiff = Math.round(priceDiff / oldPrice * 100);
  const isPriceDecreased = newPrice < oldPrice;
  
  let message = isPriceDecreased 
    ? `‚úÖ –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –±–∏–ª–µ—Ç—ã!\n\n`
    : `üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –±–∏–ª–µ—Ç—ã!\n\n`;
    
  message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
  
  if (subscription.dateType === 'single') {
    message += `üìÖ –î–∞—Ç–∞: ${subscription.date}\n`;
  } else {
    message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n`;
    if (subscription.bestDate) {
      message += `üìÖ –õ—É—á—à–∞—è –¥–∞—Ç–∞: ${subscription.bestDate}\n`;
    }
  }
  
  message += `\nüí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${oldPrice} —Ä—É–±.\n`;
  message += `üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${newPrice} —Ä—É–±.\n`;
  
  if (isPriceDecreased) {
    if (percentDiff >= 20) {
      message += `üíπ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ: ${priceDiff} —Ä—É–±. (-${percentDiff}%)! üî•\n`;
      message += `\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–æ–≤!`;
    } else {
      message += `üíπ –°–Ω–∏–∂–µ–Ω–∏–µ: ${priceDiff} —Ä—É–±. (-${percentDiff}%)\n`;
    }
  } else {
    if (percentDiff >= 20) {
      message += `üìà –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ: ${priceDiff} —Ä—É–±. (+${percentDiff}%) ‚ö†Ô∏è\n`;
    } else {
      message += `üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ: ${priceDiff} —Ä—É–±. (+${percentDiff}%)\n`;
    }
  }
  
  sendMessage(bot, subscription.chatId, message);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª—É—á—à–∏—Ö –¥–∞—Ç
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param subscription –ü–æ–¥–ø–∏—Å–∫–∞
 * @param bestDates –ú–∞—Å—Å–∏–≤ –ª—É—á—à–∏—Ö –¥–∞—Ç —Å —Ü–µ–Ω–∞–º–∏
 * @param oldPrice –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
 */
export function sendBestDatesAlert(
  bot: TelegramBot, 
  subscription: ISubscription, 
  bestDates: Array<{date: string, price: number, originCode?: string, destinationCode?: string}>,
  oldPrice: number | undefined
): void {
  const newPrice = bestDates[0].price;
  let priceChanged = oldPrice !== undefined && oldPrice !== newPrice;
  
  let title, priceChangeText = '';
  
  if (priceChanged) {
    const priceDiff = Math.abs(oldPrice! - newPrice);
    const percentDiff = Math.round(priceDiff / oldPrice! * 100);
    const isPriceDecreased = newPrice < oldPrice!;
    
    title = isPriceDecreased 
      ? `‚úÖ –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –±–∏–ª–µ—Ç—ã!`
      : `üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –±–∏–ª–µ—Ç—ã!`;
      
    if (isPriceDecreased) {
      if (percentDiff >= 20) {
        priceChangeText = `üíπ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ: ${priceDiff} —Ä—É–±. (-${percentDiff}%)! üî•\n`;
        priceChangeText += `\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–æ–≤!`;
      } else {
        priceChangeText = `üíπ –°–Ω–∏–∂–µ–Ω–∏–µ: ${priceDiff} —Ä—É–±. (-${percentDiff}%)\n`;
      }
    } else {
      if (percentDiff >= 20) {
        priceChangeText = `üìà –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ: ${priceDiff} —Ä—É–±. (+${percentDiff}%) ‚ö†Ô∏è\n`;
      } else {
        priceChangeText = `üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ: ${priceDiff} —Ä—É–±. (+${percentDiff}%)\n`;
      }
    }
  } else {
    title = `üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –¥–∞—Ç –¥–ª—è –ø–æ–µ–∑–¥–∫–∏!`;
  }
  
  let message = `${title}\n\n`;
  message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
  message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n\n`;
  
  message += `üí∞ ${priceChanged ? '–ù–æ–≤–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞' : '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞'}: ${newPrice} —Ä—É–±.\n`;
  
  if (priceChanged && oldPrice !== undefined) {
    message += `üí∞ –ü—Ä–µ–¥—ã–¥—É—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${oldPrice} —Ä—É–±.\n`;
    message += priceChangeText + '\n';
  }
  
  if (bestDates.length === 1) {
    message += `\nüìÖ –õ—É—á—à–∞—è –¥–∞—Ç–∞: ${bestDates[0].date}\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (bestDates[0].originCode && bestDates[0].destinationCode) {
      message += `‚úàÔ∏è –ú–∞—Ä—à—Ä—É—Ç: ${bestDates[0].originCode} ‚Üí ${bestDates[0].destinationCode}\n`;
    }
  } else {
    message += `\nüìÖ –õ—É—á—à–∏–µ –¥–∞—Ç—ã (${bestDates.length}):\n`;
    bestDates.forEach((item, index) => {
      message += `   ${index + 1}. ${item.date}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if (item.originCode && item.destinationCode) {
        message += ` (${item.originCode} ‚Üí ${item.destinationCode})`;
      }
      
      message += `\n`;
    });
  }
  
  sendMessage(bot, subscription.chatId, message);
}