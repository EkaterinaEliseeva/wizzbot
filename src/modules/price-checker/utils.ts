// src/modules/price-checker/utils.ts

import { ISubscription } from "../subscription/types";import { TPriceCheckResult } from "./types";
;

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
 * @param oldPrice –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞
 * @param newPrice –ù–æ–≤–∞—è —Ü–µ–Ω–∞
 * @returns –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
 */
export function calculatePriceChange(oldPrice: number, newPrice: number): {
  diff: number;
  percentDiff: number;
  isDecrease: boolean;
  isSignificant: boolean;
} {
  const diff = Math.abs(oldPrice - newPrice);
  const percentDiff = Math.round(diff / oldPrice * 100);
  const isDecrease = newPrice < oldPrice;
  const isSignificant = percentDiff >= 20;
  
  return {
    diff,
    percentDiff,
    isDecrease,
    isSignificant
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
 * @param oldPrice –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞
 * @param newPrice –ù–æ–≤–∞—è —Ü–µ–Ω–∞
 * @returns –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export function formatPriceChangeText(oldPrice: number, newPrice: number): string {
  const { diff, percentDiff, isDecrease, isSignificant } = calculatePriceChange(oldPrice, newPrice);
  
  let message = '';
  
  if (isDecrease) {
    if (isSignificant) {
      message += `üíπ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ: ${diff} USD (-${percentDiff}%)! üî•\n`;
      message += `\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–æ–≤!`;
    } else {
      message += `üíπ –°–Ω–∏–∂–µ–Ω–∏–µ: ${diff} USD (-${percentDiff}%)\n`;
    }
  } else {
    if (isSignificant) {
      message += `üìà –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ: ${diff} USD (+${percentDiff}%) ‚ö†Ô∏è\n`;
    } else {
      message += `üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ: ${diff} USD (+${percentDiff}%)\n`;
    }
  }
  
  return message;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã
 * @param subscription –ü–æ–¥–ø–∏—Å–∫–∞
 * @param result –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã
 * @param includeRouteInfo –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ (–∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö)
 * @returns –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
export function createPriceCheckDetailMessage(
  subscription: ISubscription,
  result: TPriceCheckResult,
  includeRouteInfo: boolean = true
): string | null {
  if (!result.success) {
    return null;
  }
  
  let message = '';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
  message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–µ
  if (subscription.dateType === 'single') {
    message += `üìÖ –î–∞—Ç–∞: ${subscription.date}\n`;
  } else {
    message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã
  if ('newPrice' in result && result.newPrice !== undefined) {
    message += `üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${result.newPrice} USD\n`;
    
    if ('oldPrice' in result && result.oldPrice !== undefined) {
      message += `üí∞ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞: ${result.oldPrice} USD\n`;
      
      if (result.priceChanged) {
        message += formatPriceChangeText(result.oldPrice, result.newPrice);
      }
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–µ–π—Å–µ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –¥–∞—Ç—ã
  if ('flightInfo' in result && result.flightInfo && includeRouteInfo) {
    message += `\n‚úàÔ∏è –†–µ–π—Å: ${result.flightInfo.originCode} ‚Üí ${result.flightInfo.destinationCode}\n`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É—á—à–∏—Ö –¥–∞—Ç–∞—Ö –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
  if ('bestDates' in result && result.bestDates && result.bestDates.length > 0) {
    if (result.bestDates.length === 1) {
      message += `\nüìÖ –õ—É—á—à–∞—è –¥–∞—Ç–∞: ${result.bestDates[0].date}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–µ–π—Å–µ
      if (includeRouteInfo && result.bestDates[0].originCode && result.bestDates[0].destinationCode) {
        message += ` (${result.bestDates[0].originCode} ‚Üí ${result.bestDates[0].destinationCode})`;
      }
      
      message += `\n`;
    } else {
      message += `\nüìÖ –õ—É—á—à–∏–µ –¥–∞—Ç—ã:\n`;
      
      result.bestDates.forEach((item, index) => {
        message += `   ${index + 1}. ${item.date}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ä–µ–π—Å–µ
        if (includeRouteInfo && item.originCode && item.destinationCode) {
          message += ` (${item.originCode} ‚Üí ${item.destinationCode})`;
        }
        
        message += `\n`;
      });
    }
  }
  
  return message;
}