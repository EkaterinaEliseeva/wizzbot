import { 
  getAirportCode,
  getFlightsFromTimetable,
} from '../wizz';
import { ISubscription } from '../subscription/types';
import { convertDateFormat, formatDateForDisplay, getDatesInRange } from '../../utils';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ 
 * @param origin –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * @param destination –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
 * @param date –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞
 * @returns –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
export async function checkFlightPrice(
  origin: string,
  destination: string,
  date?: string
): Promise<number | null> {
  try {    
    const originCode = getAirportCode(origin);
    const destinationCode = getAirportCode(destination);

    if (!originCode || !destinationCode) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ IATA –¥–ª—è ${!originCode ? origin : destination}`);
      return null;
    }

    if (!date) {
      const currentDate = new Date();
      const year = currentDate.getFullYear();
      const month = String(currentDate.getMonth() + 1).padStart(2, '0');
      const day = String(currentDate.getDate()).padStart(2, '0');
      date = `${day}.${month}.${year}`;
    }
    
    const formattedDate = convertDateFormat(date);

    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –¥–ª—è ${origin}(${originCode})-${destination}(${destinationCode}) –Ω–∞ –¥–∞—Ç—É ${formattedDate}`);
    
    const flightsData = await getFlightsFromTimetable(originCode, destinationCode, formattedDate);
    
    if (flightsData && flightsData.outboundFlights && flightsData.outboundFlights.length > 0) {
      const currentDateFlight = flightsData.outboundFlights.find(flight => {
        if (!flight.departureDate) return false;
        const flightDateStr = flight.departureDate.split('T')[0];
        return flightDateStr === formattedDate;
      });
      
      if (currentDateFlight) {
        const price = Number(currentDateFlight.price.amount);
        console.log(`–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ ${price} –¥–ª—è ${origin}-${destination} –Ω–∞ –¥–∞—Ç—É ${formattedDate}`);
        return price;
      } 
    }
    
    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è ${origin}-${destination} –Ω–∞ –¥–∞—Ç—É ${formattedDate}`);
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', 
      error instanceof Error ? error.message : String(error)
    );
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
 * @param origin –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * @param destination –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
 * @param startDate –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 * @param endDate –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 * @param maxDaysToCheck –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω–∞—Ö –∏ –¥–∞—Ç–∞—Ö
 */
export async function checkFlightPriceRange(
  origin: string,
  destination: string,
  startDate: string,
  endDate: string,
  maxDaysToCheck = Number(process.env.MAX_DAYS_TO_CHECK || 7)
): Promise<{ bestDates: Array<{date: string, price: number}>, minPrice: number } | null> {
  try {
    const originCode = getAirportCode(origin);
    const destinationCode = getAirportCode(destination);
    
    if (!originCode || !destinationCode) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ IATA –¥–ª—è ${!originCode ? origin : destination}`);
      return null;
    }

    const startDateFormatted = convertDateFormat(startDate);
    const endDateFormatted = convertDateFormat(endDate);

    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${startDateFormatted} - ${endDateFormatted} –¥–ª—è ${origin}-${destination}`);

    const dates = getDatesInRange(startDateFormatted, endDateFormatted, maxDaysToCheck);

    const results: Array<{date: string, price: number}> = [];

    const flightsData = await getFlightsFromTimetable(originCode, destinationCode, startDateFormatted);
    
    if (flightsData && flightsData.outboundFlights && flightsData.outboundFlights.length > 0) {
      for (const dateStr of dates) {
        const currentDateFlight = flightsData.outboundFlights.find(flight => {
          if (!flight.departureDate) return false;
          const flightDateStr = flight.departureDate.split('T')[0];
          return flightDateStr === dateStr;
        });
        
        if (currentDateFlight) {
          const price = Number(currentDateFlight.price.amount);
          const readableDate = formatDateForDisplay(dateStr);
          
          console.log(`${readableDate}: ${price} USD`);
          results.push({ date: readableDate, price });
        }
      }
      
      if (results.length === 0) {
        console.log(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ`);
        return null;
      }
      
      const minPrice = Math.min(...results.map(item => item.price));
      const bestDates = results.filter(item => item.price === minPrice);
      
      console.log(`–õ—É—á—à–∏–µ –¥–∞—Ç—ã –¥–ª—è ${origin}-${destination}:`);
      bestDates.forEach(item => {
        console.log(`${item.date}: ${item.price} USD`);
      });
      
      return {
        bestDates,
        minPrice
      };
    }
    
    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ`);
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', 
      error instanceof Error ? error.message : String(error)
    );
    return null;
  }
}



export async function getSubscriptionStatuses(subscriptions: ISubscription[]) {
  let message = '';
  
  if (subscriptions.length === 0) {
    message =  'üîç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.';
  } else {
    message = 'üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã:\n\n';

    for (let index = 0; index < subscriptions.length; index++) {
      let sub = subscriptions[index];

      message += `${index + 1}. ${sub.origin} ‚û°Ô∏è ${sub.destination}\n`;
      
      if (sub.dateType === 'single') {
        message += `   üìÖ –î–∞—Ç–∞: ${sub.date}\n`;
      } else {
        message += `   üìÖ –ü–µ—Ä–∏–æ–¥: ${sub.startDate} - ${sub.endDate}\n`;
        if (sub.bestDate) {
          message += `   üî• –õ—É—á—à–∞—è –¥–∞—Ç–∞: ${sub.bestDate}\n`;
        }
      }

      let lastPrice = sub.lastPrice || null
      
      if (!lastPrice) {
        lastPrice = await checkFlightPrice(sub.origin, sub.destination, sub.date)
      }

      if (lastPrice) {
        message += `   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${lastPrice} —Ä—É–±.\n`;
      }
      
      message += `   üóë /remove_${sub.id}\n\n`;
    }
  }

  return message;
}