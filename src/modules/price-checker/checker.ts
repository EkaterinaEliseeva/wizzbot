import { 
  getFlightsFromTimetable,
  getAllAirportCodes
} from '../wizz';
import { ISubscription } from '../subscription/types';
import { convertDateFormat, formatDateForDisplay, getDatesInRange } from '../../utils';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã
 * @param origin –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * @param destination –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
 * @param date –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞
 * @returns –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
export async function checkFlightPrice(
  origin: string,
  destination: string,
  date?: string
): Promise<number | null> {
  try {    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–¥—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    const originCodes = getAllAirportCodes(origin);
    const destinationCodes = getAllAirportCodes(destination);
    
    if (originCodes.length === 0 || destinationCodes.length === 0) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥—ã IATA –¥–ª—è ${originCodes.length === 0 ? origin : destination}`);
      return null;
    }

    if (!date) {
      const currentDate = new Date();
      const year = currentDate.getFullYear();
      const month = String(currentDate.getMonth() + 1).padStart(2, '0');
      const day = String(currentDate.getDate()).padStart(2, '0');
      date = `${day}.${month}.${year}`;
    }
    
    const formattedDate = convertDateFormat(date);
    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –¥–ª—è ${origin} -> ${destination} –Ω–∞ –¥–∞—Ç—É ${formattedDate}`);
    console.log(`–ê—ç—Ä–æ–ø–æ—Ä—Ç—ã –≤—ã–ª–µ—Ç–∞: ${originCodes.join(', ')}`);
    console.log(`–ê—ç—Ä–æ–ø–æ—Ä—Ç—ã –ø—Ä–∏–ª–µ—Ç–∞: ${destinationCodes.join(', ')}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
    const prices: number[] = [];
    
    for (const originCode of originCodes) {
      for (const destinationCode of destinationCodes) {
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: ${originCode} -> ${destinationCode}`);
        
        const flightsData = await getFlightsFromTimetable(originCode, destinationCode, formattedDate);
        
        if (flightsData && flightsData.outboundFlights && flightsData.outboundFlights.length > 0) {
          const currentDateFlight = flightsData.outboundFlights.find(flight => {
            if (!flight.departureDate) return false;
            const flightDateStr = flight.departureDate.split('T')[0];
            return flightDateStr === formattedDate;
          });
          
          if (currentDateFlight) {
            const price = Number(currentDateFlight.price.amount);
            console.log(`–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ ${price} —Ä—É–±. –¥–ª—è ${originCode} -> ${destinationCode} –Ω–∞ –¥–∞—Ç—É ${formattedDate}`);
            prices.push(price);
          }
        }
      }
    }
    
    if (prices.length > 0) {
      // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
      const minPrice = Math.min(...prices);
      console.log(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: ${minPrice} —Ä—É–±.`);
      return minPrice;
    }
    
    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è ${origin} -> ${destination} –Ω–∞ –¥–∞—Ç—É ${formattedDate}`);
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', 
      error instanceof Error ? error.message : String(error)
    );
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã
 * @param origin –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * @param destination –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
 * @param startDate –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 * @param endDate –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 * @param maxDaysToCheck –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω–∞—Ö –∏ –¥–∞—Ç–∞—Ö
 */
export async function checkFlightPriceRange(
  origin: string,
  destination: string,
  startDate: string,
  endDate: string,
  maxDaysToCheck = Number(process.env.MAX_DAYS_TO_CHECK || 7)
): Promise<{ bestDates: Array<{date: string, price: number, originCode?: string, destinationCode?: string}>, minPrice: number } | null> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–¥—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –æ–±–æ–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    const originCodes = getAllAirportCodes(origin);
    const destinationCodes = getAllAirportCodes(destination);
    
    if (originCodes.length === 0 || destinationCodes.length === 0) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥—ã IATA –¥–ª—è ${originCodes.length === 0 ? origin : destination}`);
      return null;
    }

    const startDateFormatted = convertDateFormat(startDate);
    const endDateFormatted = convertDateFormat(endDate);

    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${startDateFormatted} - ${endDateFormatted}`);
    console.log(`–ê—ç—Ä–æ–ø–æ—Ä—Ç—ã –≤—ã–ª–µ—Ç–∞: ${originCodes.join(', ')}`);
    console.log(`–ê—ç—Ä–æ–ø–æ—Ä—Ç—ã –ø—Ä–∏–ª–µ—Ç–∞: ${destinationCodes.join(', ')}`);

    const dates = getDatesInRange(startDateFormatted, endDateFormatted, maxDaysToCheck);
    
    // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    const allResults: Array<{date: string, price: number, originCode: string, destinationCode: string}> = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
    for (const originCode of originCodes) {
      for (const destinationCode of destinationCodes) {
        console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: ${originCode} -> ${destinationCode}`);
        
        const flightsData = await getFlightsFromTimetable(originCode, destinationCode, startDateFormatted);
        
        if (flightsData && flightsData.outboundFlights && flightsData.outboundFlights.length > 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
          for (const dateStr of dates) {
            const currentDateFlight = flightsData.outboundFlights.find(flight => {
              if (!flight.departureDate) return false;
              const flightDateStr = flight.departureDate.split('T')[0];
              return flightDateStr === dateStr;
            });
            
            if (currentDateFlight) {
              const price = Number(currentDateFlight.price.amount);
              const readableDate = formatDateForDisplay(dateStr);
              
              console.log(`${readableDate}: ${price} —Ä—É–±. (${originCode} -> ${destinationCode})`);
              allResults.push({ 
                date: readableDate, 
                price, 
                originCode, 
                destinationCode 
              });
            }
          }
        }
      }
    }
    
    if (allResults.length === 0) {
      console.log(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ`);
      return null;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    const minPrice = Math.min(...allResults.map(item => item.price));
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–∞—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
    const bestDates = allResults
      .filter(item => item.price === minPrice)
      .map(item => ({
        date: item.date,
        price: item.price,
        originCode: item.originCode,
        destinationCode: item.destinationCode
      }));
    
    console.log(`–õ—É—á—à–∏–µ –¥–∞—Ç—ã –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤:`);
    bestDates.forEach(item => {
      console.log(`${item.date}: ${item.price} —Ä—É–±. (${item.originCode} -> ${item.destinationCode})`);
    });
    
    return {
      bestDates,
      minPrice
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', 
      error instanceof Error ? error.message : String(error)
    );
    return null;
  }
}

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param subscriptions –ú–∞—Å—Å–∏–≤ –ø–æ–¥–ø–∏—Å–æ–∫
 * @returns –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export async function getSubscriptionStatuses(subscriptions: ISubscription[]) {
  let message = '';
  
  if (subscriptions.length === 0) {
    message = 'üîç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.';
  } else {
    message = 'üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã:\n\n';

    for (let index = 0; index < subscriptions.length; index++) {
      let sub = subscriptions[index];

      message += `${index + 1}. ${sub.origin} ‚û°Ô∏è ${sub.destination}\n`;
      
      if (sub.dateType === 'single') {
        message += `   üìÖ –î–∞—Ç–∞: ${sub.date}\n`;
      } else {
        message += `   üìÖ –ü–µ—Ä–∏–æ–¥: ${sub.startDate} - ${sub.endDate}\n`;
        
        if (sub.bestDates && sub.bestDates.length > 0) {
          if (sub.bestDates.length === 1) {
            message += `   üî• –õ—É—á—à–∞—è –¥–∞—Ç–∞: ${sub.bestDates[0].date}\n`;
          } else {
            message += `   üî• –õ—É—á—à–∏–µ –¥–∞—Ç—ã:\n`;
            sub.bestDates.slice(0, 3).forEach((dateInfo, idx) => { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3 –ª—É—á—à–∏—Ö –¥–∞—Ç
              message += `      ${idx + 1}. ${dateInfo.date}\n`;
            });
            if (sub.bestDates.length > 3) {
              message += `      ... –∏ –µ—â—ë ${sub.bestDates.length - 3}\n`;
            }
          }
        } else if (sub.bestDate) {
          message += `   üî• –õ—É—á—à–∞—è –¥–∞—Ç–∞: ${sub.bestDate}\n`;
        }
      }

      let lastPrice = sub.lastPrice || null;
      
      if (!lastPrice) {
        lastPrice = await checkFlightPrice(sub.origin, sub.destination, sub.date);
      }

      if (lastPrice) {
        message += `   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${lastPrice} —Ä—É–±.\n`;
      } else {
        message += `   üí∞ –¶–µ–Ω–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n`;
      }
      
      message += `   üóë /remove_${sub.id}\n\n`;
    }
  }

  return message;
}