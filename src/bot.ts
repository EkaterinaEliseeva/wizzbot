import TelegramBot from 'node-telegram-bot-api';
import { checkFlightPrices } from './priceChecker';
import { Subscription, addSubscription, getSubscriptions, removeSubscription } from './subscription';

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
interface UserState {
  chatId: number;
  stage: 'idle' | 'waiting_origin' | 'waiting_destination' | 'waiting_date' | 'waiting_date_range' | 'confirm';
  subscription: Partial<Subscription>;
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates: Map<number, UserState> = new Map();

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –±–æ—Ç–∞
 * @param token –¢–æ–∫–µ–Ω –±–æ—Ç–∞
 * @returns –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
export function initBot(token: string): TelegramBot {
  if (!token) {
    throw new Error('–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
  }

  const bot = new TelegramBot(token, { polling: true });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –∏ —Å–æ–æ–±—â–∞—Ç—å, –∫–æ–≥–¥–∞ –æ–Ω–∏ —Å–Ω–∏–∑—è—Ç—Å—è.
      
–í–∞—à ID —á–∞—Ç–∞: ${chatId}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
/subscribe - –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–∏–ª–µ—Ç—ã
/subscriptions - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É`
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
  bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    try {
      const currentPrice = await checkFlightPrices();
      if (currentPrice !== null) {
        bot.sendMessage(
          chatId,
          `üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice} —Ä—É–±.
–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: ${process.env.DESIRED_PRICE || '–Ω–µ –∑–∞–¥–∞–Ω–∞'} —Ä—É–±.`
        );
      } else {
        bot.sendMessage(
          chatId,
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∏ URL.'
        );
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: ${errorMessage}`);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
  bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
      chatId,
      `üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã
/subscribe - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–∏–ª–µ—Ç—ã
/subscriptions - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.`
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe
  bot.onText(/\/subscribe/, (msg) => {
    const chatId = msg.chat.id;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.set(chatId, {
      chatId,
      stage: 'waiting_origin',
      subscription: {
        chatId: chatId,
        id: Date.now().toString()
      }
    });
    
    bot.sendMessage(
      chatId,
      '‚úàÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã!\n\n–£–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≥–æ—Ä–æ–¥):',
      {
        reply_markup: {
          force_reply: true
        }
      }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscriptions
  bot.onText(/\/subscriptions/, async (msg) => {
    const chatId = msg.chat.id;
    const subscriptions = await getSubscriptions(chatId);
    
    if (subscriptions.length === 0) {
      bot.sendMessage(chatId, 'üîç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.');
      return;
    }
    
    let message = 'üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã:\n\n';
    
    subscriptions.forEach((sub, index) => {
      message += `${index + 1}. ${sub.origin} ‚û°Ô∏è ${sub.destination}\n`;
      message += `   üìÖ ${sub.dateType === 'single' ? '–î–∞—Ç–∞: ' + sub.date : '–ü–µ—Ä–∏–æ–¥: ' + sub.startDate + ' - ' + sub.endDate}\n`;
      message += `   üí∞ –ú–∞–∫—Å. —Ü–µ–Ω–∞: ${sub.maxPrice} —Ä—É–±.\n`;
      message += `   üóë /remove_${sub.id}\n\n`;
    });
    
    bot.sendMessage(chatId, message);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  bot.onText(/\/remove_(.+)/, async (msg, match) => {
    if (!match || !match[1]) return;
    
    const chatId = msg.chat.id;
    const subscriptionId = match[1];
    
    await removeSubscription(chatId, subscriptionId);
    bot.sendMessage(chatId, '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!');
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  bot.on('message', (msg) => {
    if (!msg.text || msg.text.startsWith('/')) return;
    
    const chatId = msg.chat.id;
    const userState = userStates.get(chatId);
    
    if (!userState) return;
    
    processUserDialog(bot, userState, msg.text);
  });

  return bot;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param state –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function processUserDialog(bot: TelegramBot, state: UserState, text: string): void {
  const { chatId, stage, subscription } = state;
  
  switch (stage) {
    case 'waiting_origin':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      subscription.origin = text.trim();
      state.stage = 'waiting_destination';
      
      bot.sendMessage(
        chatId,
        `üèô –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${subscription.origin}\n\n–£–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–≥–æ—Ä–æ–¥):`,
        {
          reply_markup: {
            force_reply: true
          }
        }
      );
      break;
      
    case 'waiting_destination':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      subscription.destination = text.trim();
      state.stage = 'waiting_date';
      
      bot.sendMessage(
        chatId,
        `üèô –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${subscription.origin}\nüèù –ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è: ${subscription.destination}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞—Ç—ã:`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞', callback_data: 'date_single' },
                { text: '–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç', callback_data: 'date_range' }
              ]
            ]
          }
        }
      );
      break;
      
    case 'waiting_date':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
      subscription.dateType = 'single';
      subscription.date = text.trim();
      state.stage = 'confirm';
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
      bot.sendMessage(
        chatId,
        `üèô –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${subscription.origin}\nüèù –ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è: ${subscription.destination}\nüìÖ –î–∞—Ç–∞: ${subscription.date}\n\n–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:`,
        {
          reply_markup: {
            force_reply: true
          }
        }
      );
      break;
      
    case 'waiting_date_range':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (—Ñ–æ—Ä–º–∞—Ç: dd.mm.yyyy - dd.mm.yyyy)
      try {
        const [startDate, endDate] = text.split('-').map(d => d.trim());
        if (!startDate || !endDate) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
        
        subscription.dateType = 'range';
        subscription.startDate = startDate;
        subscription.endDate = endDate;
        state.stage = 'confirm';
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        bot.sendMessage(
          chatId,
          `üèô –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${subscription.origin}\nüèù –ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è: ${subscription.destination}\nüìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n\n–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:`,
          {
            reply_markup: {
              force_reply: true
            }
          }
        );
      } catch (e) {
        bot.sendMessage(
          chatId,
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY - DD.MM.YYYY'
        );
      }
      break;
      
    case 'confirm':
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      const maxPrice = parseInt(text.trim(), 10);
      
      if (isNaN(maxPrice)) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã.');
        return;
      }
      
      subscription.maxPrice = maxPrice;
      
      // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      addSubscription(subscription as Subscription)
        .then(() => {
          let message = '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n';
          message += `üèô –û—Ç–∫—É–¥–∞: ${subscription.origin}\n`;
          message += `üèù –ö—É–¥–∞: ${subscription.destination}\n`;
          
          if (subscription.dateType === 'single') {
            message += `üìÖ –î–∞—Ç–∞: ${subscription.date}\n`;
          } else {
            message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n`;
          }
          
          message += `üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${subscription.maxPrice} —Ä—É–±.\n\n`;
          message += '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞–π–¥—É—Ç—Å—è –±–∏–ª–µ—Ç—ã –ø–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ü–µ–Ω–µ.';
          
          bot.sendMessage(chatId, message);
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          userStates.delete(chatId);
        })
        .catch(error => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
          bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          userStates.delete(chatId);
        });
      break;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
export function setupCallbackQueryHandlers(bot: TelegramBot): void {
  bot.on('callback_query', (query) => {
    if (!query.message || !query.data) return;
    
    const chatId = query.message.chat.id;
    const userState = userStates.get(chatId);
    
    if (!userState) return;
    
    const messageId = query.message.message_id;
    
    if (query.data === 'date_single') {
      userState.stage = 'waiting_date';
      bot.editMessageText('–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:', {
        chat_id: chatId,
        message_id: messageId
      });
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:', {
        reply_markup: { force_reply: true }
      });
    } else if (query.data === 'date_range') {
      userState.stage = 'waiting_date_range';
      bot.editMessageText('–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç:', {
        chat_id: chatId,
        message_id: messageId
      });
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì:', {
        reply_markup: { force_reply: true }
      });
    }
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param chatId ID —á–∞—Ç–∞
 * @param message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export function sendMessage(bot: TelegramBot, chatId: string | number, message: string): void {
  bot.sendMessage(chatId, message);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param subscription –ü–æ–¥–ø–∏—Å–∫–∞
 * @param newPrice –ù–æ–≤–∞—è —Ü–µ–Ω–∞
 * @param oldPrice –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞
 */
export function sendPriceAlert(
  bot: TelegramBot, 
  subscription: Subscription, 
  newPrice: number, 
  oldPrice: number
): void {
  const priceDiff = oldPrice - newPrice;
  
  let message = `‚úÖ –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n\n`;
  message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
  
  if (subscription.dateType === 'single') {
    message += `üìÖ –î–∞—Ç–∞: ${subscription.date}\n`;
  } else {
    message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n`;
  }
  
  message += `\nüí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${oldPrice} —Ä—É–±.\n`;
  message += `üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${newPrice} —Ä—É–±.\n`;
  message += `üíπ –°–Ω–∏–∂–µ–Ω–∏–µ: ${priceDiff} —Ä—É–±. (-${Math.round(priceDiff / oldPrice * 100)}%)\n\n`;
  
  if (newPrice <= subscription.maxPrice) {
    message += `üî• –¶–µ–Ω–∞ –Ω–∏–∂–µ –≤–∞—à–µ–≥–æ –ø–æ—Ä–æ–≥–∞ (${subscription.maxPrice} —Ä—É–±.)!`;
  }
  
  sendMessage(bot, subscription.chatId, message);
}