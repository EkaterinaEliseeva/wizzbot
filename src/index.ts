import dotenv from 'dotenv';
import express, { Request, Response } from 'express';
import { CronJob } from 'cron';
import { initBot, setupCallbackQueryHandlers, sendPriceAlert } from './modules/bot';
import { checkFlightPrice, checkFlightPriceRange } from './modules/price-checker';
import { getAllSubscriptions, updateSubscriptionPrice, updateSubscriptionDetails } from './modules/subscription';
import { testWizzairRoute, testDateRangeRoute } from './routes';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.TELEGRAM_BOT_TOKEN) {
  throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express —Å–µ—Ä–≤–µ—Ä–∞
const app = express();
const PORT = process.env.PORT || 3000;


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = initBot(process.env.TELEGRAM_BOT_TOKEN);
setupCallbackQueryHandlers(bot);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
const priceCheckJob = new CronJob(
  process.env.CHECK_INTERVAL || '0 */1 * * *', // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  async function() {
    try {
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∫–∞–º–∏...');
      const subscriptions = await getAllSubscriptions();
      
      for (const subscription of subscriptions) {
        try {
          let currentPrice: number | null = null;
          let bestDate: string | undefined = undefined;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
          if (subscription.dateType === 'single' && subscription.date) {
            // –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
            currentPrice = await checkFlightPrice(
              subscription.origin,
              subscription.destination,
              subscription.date
            );
          } else if (subscription.dateType === 'range' && subscription.startDate && subscription.endDate) {
            // –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
            const priceInfo = await checkFlightPriceRange(
              subscription.origin,
              subscription.destination,
              subscription.startDate,
              subscription.endDate
            );
            
            if (priceInfo) {
              currentPrice = priceInfo.price;
              bestDate = priceInfo.date;
            }
          }
          
          if (currentPrice) {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            if (!subscription.lastPrice) {
              if (bestDate && subscription.dateType === 'range') {
                // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–æ–≤–∞—è –ª—É—á—à–∞—è –¥–∞—Ç–∞ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
                await updateSubscriptionDetails(subscription.id, {
                  lastPrice: currentPrice,
                  bestDate: bestDate
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å –ª—É—á—à–µ–π –¥–∞—Ç–æ–π
                let message = `üîç –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n`;
                message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
                message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n`;
                message += `üìÖ –õ—É—á—à–∞—è –¥–∞—Ç–∞: ${bestDate}\n`;
                message += `\nüí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice} —Ä—É–±.\n`;
                message += `\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã.`;
                
                bot.sendMessage(subscription.chatId, message);
              } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É
                await updateSubscriptionPrice(subscription.id, currentPrice);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                let message = `üîç –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n`;
                message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
                
                if (subscription.dateType === 'single') {
                  message += `üìÖ –î–∞—Ç–∞: ${subscription.date}\n`;
                } else {
                  message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n`;
                }
                
                message += `\nüí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice} —Ä—É–±.\n`;
                message += `\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã.`;
                
                bot.sendMessage(subscription.chatId, message);
              }
              continue;
            }
            
            // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if (currentPrice !== subscription.lastPrice) {
              if (currentPrice < subscription.lastPrice) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–∞—è –ª—É—á—à–∞—è –¥–∞—Ç–∞ –∏ —Ü–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å
                if (bestDate && subscription.dateType === 'range') {
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ª—É—á—à–µ–π –¥–∞—Ç–µ
                  let message = `‚úÖ –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –±–∏–ª–µ—Ç—ã!\n\n`;
                  message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
                  message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n`;
                  message += `üìÖ –õ—É—á—à–∞—è –¥–∞—Ç–∞: ${bestDate}\n\n`;
                  
                  message += `üí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${subscription.lastPrice} —Ä—É–±.\n`;
                  message += `üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${currentPrice} —Ä—É–±.\n`;
                  
                  const priceDiff = subscription.lastPrice - currentPrice;
                  const percentDiff = Math.round(priceDiff / subscription.lastPrice * 100);
                  
                  if (percentDiff >= 20) {
                    message += `üíπ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ: ${priceDiff} —Ä—É–±. (-${percentDiff}%)! üî•\n`;
                    message += `\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–æ–≤!`;
                  } else {
                    message += `üíπ –°–Ω–∏–∂–µ–Ω–∏–µ: ${priceDiff} —Ä—É–±. (-${percentDiff}%)\n`;
                  }
                  
                  bot.sendMessage(subscription.chatId, message);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∏ –ª—É—á—à—É—é –¥–∞—Ç—É
                  await updateSubscriptionDetails(subscription.id, {
                    lastPrice: currentPrice,
                    bestDate: bestDate
                  });
                } else {
                  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã
                  sendPriceAlert(bot, subscription, currentPrice, subscription.lastPrice);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ü–µ–Ω—É
                  await updateSubscriptionPrice(subscription.id, currentPrice);
                }
              } else if (currentPrice > subscription.lastPrice) {
                // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ (–±–æ–ª–µ–µ —á–µ–º –Ω–∞ 20%)
                const priceDiff = currentPrice - subscription.lastPrice;
                const percentDiff = Math.round(priceDiff / subscription.lastPrice * 100);
                
                if (percentDiff > 20) {
                  let message = `‚ö†Ô∏è –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã!\n\n`;
                  message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
                  
                  if (subscription.dateType === 'single') {
                    message += `üìÖ –î–∞—Ç–∞: ${subscription.date}\n`;
                  } else {
                    message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n`;
                    if (bestDate) {
                      message += `üìÖ –õ—É—á—à–∞—è –¥–∞—Ç–∞: ${bestDate}\n`;
                    }
                  }
                  
                  message += `\nüí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${subscription.lastPrice} —Ä—É–±.\n`;
                  message += `üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${currentPrice} —Ä—É–±.\n`;
                  message += `üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ: ${priceDiff} —Ä—É–±. (+${percentDiff}%)\n`;
                  
                  bot.sendMessage(subscription.chatId, message);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∏ –ª—É—á—à—É—é –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if (bestDate && subscription.dateType === 'range') {
                  await updateSubscriptionDetails(subscription.id, {
                    lastPrice: currentPrice,
                    bestDate: bestDate
                  });
                } else {
                  await updateSubscriptionPrice(subscription.id, currentPrice);
                }
              }
            } else if (bestDate && subscription.dateType === 'range' && bestDate !== subscription.bestDate) {
              // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª—É—á—à–∞—è –¥–∞—Ç–∞
              let message = `üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—É—á—à–µ–π –¥–∞—Ç—ã –¥–ª—è –ø–æ–µ–∑–¥–∫–∏!\n\n`;
              message += `${subscription.origin} ‚û°Ô∏è ${subscription.destination}\n`;
              message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${subscription.startDate} - ${subscription.endDate}\n`;
              message += `üìÖ –ù–æ–≤–∞—è –ª—É—á—à–∞—è –¥–∞—Ç–∞: ${bestDate}\n`;
              message += `\nüí∞ –¶–µ–Ω–∞: ${currentPrice} —Ä—É–±.\n`;
              
              bot.sendMessage(subscription.chatId, message);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é –¥–∞—Ç—É
              await updateSubscriptionDetails(subscription.id, {
                lastPrice: currentPrice,
                bestDate: bestDate
              });
            }
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, error);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω:', error);
    }
  },
  null,
  true
);

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
app.get('/check-prices', async (_req: Request, res: Response) => {
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω
    priceCheckJob.fireOnTick();
    res.send('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∑–∞–ø—É—â–µ–Ω–∞');
  } catch (error) {
    res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω');
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (_req: Request, res: Response) => {
  res.send('Flight Price Tracker —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Wizzair API –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
app.get('/test-wizzair', testWizzairRoute);

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
app.get('/test-date-range', testDateRangeRoute);

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π');
  console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: ${process.env.CHECK_INTERVAL || '0 */1 * * *'}`);
});